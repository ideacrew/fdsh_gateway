# frozen_string_literal: true

require 'spec_helper'
require 'medicare_metadata_setup'

RSpec.describe Fdsh::Rrv::Medicare::Request::CreateTransactionFile do

  before :all do
    DatabaseCleaner.clean
  end

  #   after :each do
  #     # delete the most recent manifest (the one generated by this spec)
  #     manifest_from_spec = Dir[Rails.root.join("rrv_outbound_files/SBE00ME.DSH.RRVIN.D*.IN.zip")].max { |f1, f2| File.mtime(f1) <=> File.mtime(f2) }
  #     File.delete(manifest_from_spec)
  #   end

  #   applications = [TEST_APPLICATION_1, TEST_APPLICATION_2, TEST_APPLICATION_3, TEST_APPLICATION_4, TEST_APPLICATION_5,
  #                   TEST_APPLICATION_6, TEST_APPLICATION_7, TEST_APPLICATION_8, TEST_APPLICATION_9, TEST_APPLICATION_10,
  #                   TEST_APPLICATION_11, TEST_APPLICATION_12, TEST_APPLICATION_13, TEST_APPLICATION_14,
  #                   TEST_APPLICATION_15, TEST_APPLICATION_16, TEST_APPLICATION_17].collect do |payload|
  #     AcaEntities::MagiMedicaid::Operations::InitializeApplication.new.call(payload).value!
  #   end

  let(:create_application_requests) do
    (1..17).each do |index|
      Fdsh::Rrv::Medicare::Request::StoreApplicationRrvRequest.new.call({ application_hash: "TEST_APPLICATION_#{index}".constantize })
    end
  end

  before do
    create_application_requests
  end

  let(:params) do
    {
      application_payload: [JSON.parse(Transaction.first.activities.last.message['request'])]
    }
  end

  subject do
    described_class.new.call(params)
  end

  it "should return transaction xml with applicants count" do
    expect(Transaction.count).to eq 17
    expect(subject.success?).to be_truthy
    expect(Nokogiri::XML(subject.success[0]).errors.empty?).to be_truthy
    expect(subject.success[1]).to eq 1
  end
end
